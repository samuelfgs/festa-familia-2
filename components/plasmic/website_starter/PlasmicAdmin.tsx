// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: exaoomPbYuXnPAofivxyBg
// Component: Tgb-pTpo14

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/registerForm"; // plasmic-import: TgJFzUZpvQ/codeComponent
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/registerForm"; // plasmic-import: TgJFzUZpvQ/codeComponentHelper
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton"; // plasmic-import: bx9Xzvf5_eu/codeComponent
import TextInput from "../../TextInput"; // plasmic-import: G-9wxnMSpbO/component
import Button from "../../Button"; // plasmic-import: CQMlXR-8qOT/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_website_starter.module.css"; // plasmic-import: exaoomPbYuXnPAofivxyBg/projectcss
import sty from "./PlasmicAdmin.module.css"; // plasmic-import: Tgb-pTpo14/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: e1nc6AnHAdj/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: zO3IinhDY-6/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: D7gXXO_8eAR/icon

createPlasmicElementProxy;

export type PlasmicAdmin__VariantMembers = {};
export type PlasmicAdmin__VariantsArgs = {};
type VariantPropType = keyof PlasmicAdmin__VariantsArgs;
export const PlasmicAdmin__VariantProps = new Array<VariantPropType>();

export type PlasmicAdmin__ArgsType = {
  orders?: any;
  onSubmit?: (id: number) => void;
  onFinish?: (values: any) => void;
};
type ArgPropType = keyof PlasmicAdmin__ArgsType;
export const PlasmicAdmin__ArgProps = new Array<ArgPropType>(
  "orders",
  "onSubmit",
  "onFinish"
);

export type PlasmicAdmin__OverridesType = {
  root?: p.Flex<"div">;
  form?: p.Flex<typeof FormWrapper>;
  textInput?: p.Flex<typeof TextInput>;
};

export interface DefaultAdminProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAdmin__RenderFunc(props: {
  variants: PlasmicAdmin__VariantsArgs;
  args: PlasmicAdmin__ArgsType;
  overrides: PlasmicAdmin__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          orders: []
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = ph.useGlobalActions?.();

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: p.generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "" as const
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries,
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__yLyt)}
            >
              {true ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox___9KigS)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__x02Tl
                    )}
                  >
                    {"Novo pedido "}
                  </div>
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.form),
                      extendedOnValuesChange:
                        p.generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["form", "value"],
                          FormWrapper_Helpers
                        ),
                      formItems: (() => {
                        const __composite = [
                          { label: "Name", name: "name", inputType: "Text" },
                          {
                            label: null,
                            name: null,
                            inputType: null,
                            options: null,
                            initialValue: null
                          }
                        ];
                        __composite["1"]["label"] = "Barraca";
                        __composite["1"]["name"] = "barraca";
                        __composite["1"]["inputType"] = "Select";
                        __composite["1"]["options"] = [
                          "Burguer",
                          "JaponÃªs",
                          "Pastel"
                        ].map(x => ({
                          label: x,
                          value: x
                        }));
                        __composite["1"]["initialValue"] = "Burguer";
                        return __composite;
                      })(),

                      labelCol: { span: 8, horizontalOnly: true },
                      layout: "vertical" as const,
                      mode: "simplified" as const,
                      ref: ref => {
                        $refs["form"] = ref;
                      },
                      submitSlot: (
                        <AntdButton
                          className={classNames(
                            "__wab_instance",
                            sty.button__hzdqO
                          )}
                          onClick={async () => {
                            const $steps = {};
                            $steps["runOnFinish"] = true
                              ? (() => {
                                  const actionArgs = {
                                    eventRef: __wrapUserFunction(
                                      {
                                        type: "InteractionArgLoc",
                                        actionName: "invokeEventHandler",
                                        interactionUuid: "NQ1HBWDoI",
                                        componentUuid: "Tgb-pTpo14",
                                        argName: "eventRef"
                                      },
                                      () => $props["onFinish"]
                                    ),
                                    args: __wrapUserFunction(
                                      {
                                        type: "InteractionArgLoc",
                                        actionName: "invokeEventHandler",
                                        interactionUuid: "NQ1HBWDoI",
                                        componentUuid: "Tgb-pTpo14",
                                        argName: "args"
                                      },
                                      () => [
                                        (() => {
                                          try {
                                            return $state.form.value;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                      ]
                                    )
                                  };
                                  return __wrapUserFunction(
                                    {
                                      type: "InteractionLoc",
                                      actionName: "invokeEventHandler",
                                      interactionUuid: "NQ1HBWDoI",
                                      componentUuid: "Tgb-pTpo14"
                                    },
                                    () =>
                                      (({ eventRef, args }) => {
                                        return eventRef?.(...(args ?? []));
                                      })?.apply(null, [actionArgs]),
                                    actionArgs
                                  );
                                })()
                              : undefined;
                            if (
                              typeof $steps["runOnFinish"] === "object" &&
                              typeof $steps["runOnFinish"].then === "function"
                            ) {
                              $steps["runOnFinish"] = await __wrapUserPromise(
                                {
                                  type: "InteractionLoc",
                                  actionName: "invokeEventHandler",
                                  interactionUuid: "NQ1HBWDoI",
                                  componentUuid: "Tgb-pTpo14"
                                },
                                $steps["runOnFinish"]
                              );
                            }
                            $steps["elementAction"] = true
                              ? (() => {
                                  const actionArgs = {
                                    tplRef: __wrapUserFunction(
                                      {
                                        type: "InteractionArgLoc",
                                        actionName: "invokeRefAction",
                                        interactionUuid: "4f165WXbC",
                                        componentUuid: "Tgb-pTpo14",
                                        argName: "tplRef"
                                      },
                                      () => "form"
                                    ),
                                    action: __wrapUserFunction(
                                      {
                                        type: "InteractionArgLoc",
                                        actionName: "invokeRefAction",
                                        interactionUuid: "4f165WXbC",
                                        componentUuid: "Tgb-pTpo14",
                                        argName: "action"
                                      },
                                      () => "resetFields"
                                    )
                                  };
                                  return __wrapUserFunction(
                                    {
                                      type: "InteractionLoc",
                                      actionName: "invokeRefAction",
                                      interactionUuid: "4f165WXbC",
                                      componentUuid: "Tgb-pTpo14"
                                    },
                                    () =>
                                      (({ tplRef, action, args }) => {
                                        $refs?.[tplRef]?.[action]?.(
                                          ...(args ?? [])
                                        );
                                      })?.apply(null, [actionArgs]),
                                    actionArgs
                                  );
                                })()
                              : undefined;
                            if (
                              typeof $steps["elementAction"] === "object" &&
                              typeof $steps["elementAction"].then === "function"
                            ) {
                              $steps["elementAction"] = await __wrapUserPromise(
                                {
                                  type: "InteractionLoc",
                                  actionName: "invokeRefAction",
                                  interactionUuid: "4f165WXbC",
                                  componentUuid: "Tgb-pTpo14"
                                },
                                $steps["elementAction"]
                              );
                            }
                            $steps["showNotification"] = true
                              ? (() => {
                                  const actionArgs = {
                                    type: __wrapUserFunction(
                                      {
                                        type: "InteractionArgLoc",
                                        actionName:
                                          "plasmic-antd5-config-provider.showNotification",
                                        interactionUuid: "YhZrd0WGi",
                                        componentUuid: "Tgb-pTpo14",
                                        argName: "type"
                                      },
                                      () => "success"
                                    ),
                                    message: __wrapUserFunction(
                                      {
                                        type: "InteractionArgLoc",
                                        actionName:
                                          "plasmic-antd5-config-provider.showNotification",
                                        interactionUuid: "YhZrd0WGi",
                                        componentUuid: "Tgb-pTpo14",
                                        argName: "message"
                                      },
                                      () => "Pedido enviado"
                                    ),
                                    description: __wrapUserFunction(
                                      {
                                        type: "InteractionArgLoc",
                                        actionName:
                                          "plasmic-antd5-config-provider.showNotification",
                                        interactionUuid: "YhZrd0WGi",
                                        componentUuid: "Tgb-pTpo14",
                                        argName: "description"
                                      },
                                      () => ``
                                    ),
                                    duration: __wrapUserFunction(
                                      {
                                        type: "InteractionArgLoc",
                                        actionName:
                                          "plasmic-antd5-config-provider.showNotification",
                                        interactionUuid: "YhZrd0WGi",
                                        componentUuid: "Tgb-pTpo14",
                                        argName: "duration"
                                      },
                                      () => 2
                                    )
                                  };
                                  return __wrapUserFunction(
                                    {
                                      type: "InteractionLoc",
                                      actionName:
                                        "plasmic-antd5-config-provider.showNotification",
                                      interactionUuid: "YhZrd0WGi",
                                      componentUuid: "Tgb-pTpo14"
                                    },
                                    () =>
                                      $globalActions[
                                        "plasmic-antd5-config-provider.showNotification"
                                      ]?.apply(null, [actionArgs]),
                                    actionArgs
                                  );
                                })()
                              : undefined;
                            if (
                              typeof $steps["showNotification"] === "object" &&
                              typeof $steps["showNotification"].then ===
                                "function"
                            ) {
                              $steps["showNotification"] =
                                await __wrapUserPromise(
                                  {
                                    type: "InteractionLoc",
                                    actionName:
                                      "plasmic-antd5-config-provider.showNotification",
                                    interactionUuid: "YhZrd0WGi",
                                    componentUuid: "Tgb-pTpo14"
                                  },
                                  $steps["showNotification"]
                                );
                            }
                          }}
                          submitsForm={true}
                          type={"primary" as const}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___5XgPs
                            )}
                          >
                            {"Enviar"}
                          </div>
                        </AntdButton>
                      ),
                      wrapperCol: { span: 16, horizontalOnly: true }
                    };
                    p.initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "form.value"
                        }
                      ],
                      [],
                      FormWrapper_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <FormWrapper
                        data-plasmic-name={"form"}
                        data-plasmic-override={overrides.form}
                        {...child$Props}
                      />
                    );
                  })()}
                </div>
              ) : null}
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__xZjRt)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kfYij
                    )}
                  >
                    {"Pedidos em aberto"}
                  </div>
                  <TextInput
                    data-plasmic-name={"textInput"}
                    data-plasmic-override={overrides.textInput}
                    className={classNames("__wab_instance", sty.textInput)}
                    onChange={(...eventArgs) => {
                      p.generateStateOnChangeProp($state, [
                        "textInput",
                        "value"
                      ])((e => e.target?.value).apply(null, eventArgs));
                    }}
                    value={
                      p.generateStateValueProp($state, [
                        "textInput",
                        "value"
                      ]) ?? ""
                    }
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox___434ET)}
                  >
                    {(
                      (() => {
                        try {
                          return $props.orders.filter(order =>
                            order.name
                              .toLowerCase()
                              .includes($state.textInput.value.toLowerCase())
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })() ?? []
                    ).map((currentItem, currentIndex) => (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___2DR5
                        )}
                        key={currentIndex}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tupvr
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.name;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__onHso
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.barraca;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__jQbyi
                          )}
                          onClick={async event => {
                            const $steps = {};
                            $steps["runOnSubmit"] = true
                              ? (() => {
                                  const actionArgs = {
                                    eventRef: __wrapUserFunction(
                                      {
                                        type: "InteractionArgLoc",
                                        actionName: "invokeEventHandler",
                                        interactionUuid: "V3D6Qo90v",
                                        componentUuid: "Tgb-pTpo14",
                                        argName: "eventRef"
                                      },
                                      () => $props["onSubmit"]
                                    ),
                                    args: __wrapUserFunction(
                                      {
                                        type: "InteractionArgLoc",
                                        actionName: "invokeEventHandler",
                                        interactionUuid: "V3D6Qo90v",
                                        componentUuid: "Tgb-pTpo14",
                                        argName: "args"
                                      },
                                      () => [
                                        (() => {
                                          try {
                                            return currentItem.id;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                      ]
                                    )
                                  };
                                  return __wrapUserFunction(
                                    {
                                      type: "InteractionLoc",
                                      actionName: "invokeEventHandler",
                                      interactionUuid: "V3D6Qo90v",
                                      componentUuid: "Tgb-pTpo14"
                                    },
                                    () =>
                                      (({ eventRef, args }) => {
                                        return eventRef?.(...(args ?? []));
                                      })?.apply(null, [actionArgs]),
                                    actionArgs
                                  );
                                })()
                              : undefined;
                            if (
                              typeof $steps["runOnSubmit"] === "object" &&
                              typeof $steps["runOnSubmit"].then === "function"
                            ) {
                              $steps["runOnSubmit"] = await __wrapUserPromise(
                                {
                                  type: "InteractionLoc",
                                  actionName: "invokeEventHandler",
                                  interactionUuid: "V3D6Qo90v",
                                  componentUuid: "Tgb-pTpo14"
                                },
                                $steps["runOnSubmit"]
                              );
                            }
                          }}
                        >
                          {"Entregue"}
                        </Button>
                      </p.Stack>
                    ))}
                  </div>
                </p.Stack>
              ) : null}
            </p.Stack>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "form", "textInput"],
  form: ["form"],
  textInput: ["textInput"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  form: typeof FormWrapper;
  textInput: typeof TextInput;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAdmin__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAdmin__VariantsArgs;
    args?: PlasmicAdmin__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAdmin__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAdmin__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAdmin__ArgProps,
          internalVariantPropNames: PlasmicAdmin__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAdmin__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAdmin";
  } else {
    func.displayName = `PlasmicAdmin.${nodeName}`;
  }
  return func;
}

export const PlasmicAdmin = Object.assign(
  // Top-level PlasmicAdmin renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    form: makeNodeComponent("form"),
    textInput: makeNodeComponent("textInput"),

    // Metadata about props expected for PlasmicAdmin
    internalVariantProps: PlasmicAdmin__VariantProps,
    internalArgProps: PlasmicAdmin__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAdmin;
/* prettier-ignore-end */
